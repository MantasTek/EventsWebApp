@using EventsWebApp.Models.ViewModels
@model EventFormViewModel
@{
    ViewData["Title"] = "Event Details";
}

<h2>@(Model?.EventName ?? "Event Details")</h2>

<div class="card">
    <div class="card-body">
        @if (!string.IsNullOrEmpty(Model?.EventCategory))
        {
            <p><strong>Category:</strong> @Model.EventCategory</p>
        }

        @if (!string.IsNullOrEmpty(Model?.Description))
        {
            <p><strong>Description:</strong> @Model.Description</p>
        }

        @if (!string.IsNullOrEmpty(Model?.EventDate))
        {
            <p><strong>Date:</strong> @Model.EventDate</p>
        }

        @if (!string.IsNullOrEmpty(Model?.EventTime))
        {
            <p><strong>Time:</strong> @Model.EventTime</p>
        }

        @if (!string.IsNullOrEmpty(Model?.Location))
        {
            <p><strong>Location:</strong> @Model.Location</p>
        }

        @if (!string.IsNullOrEmpty(Model?.VenueName))
        {
            <p><strong>Venue:</strong> @Model.VenueName</p>
        }

        <p><strong>Capacity:</strong> @(Model?.Capacity ?? 0)</p>

        @if (Model != null && Model.TicketsSold > 0)
        {
            <p><strong>Tickets Sold:</strong> @Model.TicketsSold (@Model.TicketsSoldPercentage% of capacity)</p>
        }
    </div>
</div>

<div class="mt-3" style="display: flex; gap: 0.75rem;">
    <a href="#reserveForm" class="btn btn-primary btn-lg" onclick="document.getElementById('reserveForm').style.display='block';">
        <i class="fas fa-ticket-alt"></i> Reserve Tickets
    </a>
    <a asp-action="Edit" asp-route-id="@Model?.EventId" class="btn btn-primary">
        <i class="fas fa-edit"></i> Edit
    </a>
    <a asp-action="Index" class="btn btn-secondary">
        <i class="fas fa-arrow-left"></i> Back to Events
    </a>
    <form asp-action="Delete" asp-route-id="@Model?.EventId" method="post" style="display: inline;"
          onsubmit="return confirm('Are you sure you want to delete this event? This action cannot be undone.');">
        @Html.AntiForgeryToken()
        <button type="submit" class="btn btn-danger">
            <i class="fas fa-trash"></i> Delete Event
        </button>
    </form>
</div>

<!-- Reservation Form - Submits to Bookings Service -->
<div id="reserveForm" style="display: none; margin-top: 2rem;">
    <div class="card">
        <div class="card-header">
            <h3>Reserve Tickets - @Model?.EventName</h3>
            <div class="additional-info">
                <i class="fas fa-calendar"></i> @Model?.EventDate
                @if (!string.IsNullOrEmpty(Model?.EventTime))
                {
                    <span>at @Model.EventTime</span>
                }
            </div>
            <div class="additional-info">
                <i class="fas fa-map-marker-alt"></i> @Model?.Location
                @if (!string.IsNullOrEmpty(Model?.VenueName))
                {
                    <span>- @Model.VenueName</span>
                }
            </div>
        </div>

        <div class="card-body">
            <!-- FORM SUBMITS TO BOOKINGS SERVICE -->
            <form asp-controller="Booking" asp-action="CreateReservation" method="post" class="event-form">
                @Html.AntiForgeryToken()

                <!-- Event Data (matches proto structure) -->
                <input type="hidden" name="EventId" value="@Model?.EventId" />
                <input type="hidden" name="EventName" value="@Model?.EventName" />
                <input type="hidden" name="EventCategory" value="@Model?.EventCategory" />
                <input type="hidden" name="EventDate" value="@Model?.EventDate" />
                <input type="hidden" name="EventTime" value="@Model?.EventTime" />
                <input type="hidden" name="EventLocation" value="@Model?.Location" />
                <input type="hidden" name="VenueName" value="@Model?.VenueName" />

                <!-- Owner Data (if needed by booking service) -->
                <input type="hidden" name="EventOwnerName" value="@Model?.OwnerName" />
                <input type="hidden" name="EventOwnerEmail" value="@Model?.OwnerEmail" />
                <input type="hidden" name="EventOwnerAddress" value="@Model?.OwnerAddress" />
                <input type="hidden" name="EventOwnerPhone" value="@Model?.OwnerPhone" />

                <div class="form-section">
                    <h4 class="section-title">Customer Information</h4>

                    <div class="form-group">
                        <label class="form-label">Full Name *</label>
                        <input type="text" name="CustomerName" class="form-control" placeholder="Enter your full name" required />
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label class="form-label">Email *</label>
                            <input type="email" name="CustomerEmail" class="form-control" placeholder="your.email@example.com" required />
                        </div>

                        <div class="form-group col-md-6">
                            <label class="form-label">Phone *</label>
                            <input type="tel" name="CustomerPhone" class="form-control" placeholder="+46 123 456 789" required />
                        </div>
                    </div>
                </div>

                <div class="form-section">
                    <h4 class="section-title">Ticket Selection</h4>

                    <div class="form-row">
                        <div class="form-group col-md-8">
                            <label class="form-label">Ticket Type *</label>
                            <select name="SelectedTicketCategory" class="form-control" required onchange="updateTicketPrice(this)">
                                <option value="">-- Select Ticket Type --</option>
                                @if (Model?.TicketCategories != null && Model.TicketCategories.Any())
                                {
                                    @foreach (var ticket in Model.TicketCategories)
                                    {
                                        <option value="@ticket.TicketCategory"
                                                data-price="@ticket.Price"
                                                data-available="@ticket.AvailableQuantity">
                                            @ticket.TicketCategory - @ticket.FormattedPrice
                                            @if (ticket.AvailableQuantity <= 0)
                                            {
                                                <text> (Sold Out)</text>
                                            }
                                            else if (ticket.AvailableQuantity <= 10)
                                            {
                                                <text> (Only @ticket.AvailableQuantity left!)</text>
                                            }
                                        </option>
                                    }
                                }
                                else
                                {
                                    <!-- Fallback if no tickets are loaded -->
                                    <option value="Standard" data-price="29.99">Standard - $29.99</option>
                                    <option value="VIP" data-price="79.99">VIP - $79.99</option>
                                    <option value="Premium" data-price="149.99">Premium - $149.99</option>
                                }
                            </select>
                            <!-- Hidden field for ticket price -->
                            <input type="hidden" name="SelectedTicketPrice" id="ticketPrice" />
                        </div>

                        <div class="form-group col-md-4">
                            <label class="form-label">Quantity *</label>
                            <input type="number" name="TicketQuantity" id="ticketQuantity" value="1" min="1" max="10" class="form-control" required onchange="updateTotal()" />
                        </div>
                    </div>

                    <!-- Ticket Description -->
                    <div id="ticketDescription" style="display: none; margin-top: 1rem; padding: 1rem; background-color: var(--section-background-color); border-radius: 0.5rem;">
                        <p id="descriptionText" style="margin: 0; color: var(--text-muted-color); font-size: 0.875rem;"></p>
                    </div>

                    <!-- Total Price Display -->
                    <div id="totalDisplay" style="display: none; margin-top: 1rem; padding: 1rem; background-color: var(--primary-30); border-radius: 0.5rem; text-align: center;">
                        <strong style="font-size: 1.25rem; color: var(--primary-100);">
                            Total: $<span id="totalAmount">0.00</span>
                        </strong>
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary btn-lg">
                        <i class="fas fa-ticket-alt"></i> Reserve Tickets
                    </button>
                    <button type="button" class="btn btn-secondary btn-lg" onclick="document.getElementById('reserveForm').style.display='none';">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function updateTicketPrice(selectElement) {
        const selectedOption = selectElement.options[selectElement.selectedIndex];
        const priceField = document.querySelector('#ticketPrice');
        const descriptionDiv = document.querySelector('#ticketDescription');
        const descriptionText = document.querySelector('#descriptionText');
        const quantityInput = document.querySelector('#ticketQuantity');

        if (selectedOption.value && priceField) {
            const price = selectedOption.getAttribute('data-price') || '0';
            const available = parseInt(selectedOption.getAttribute('data-available')) || 0;

            priceField.value = price;

            // Update quantity max based on availability
            if (available > 0 && available < 10) {
                quantityInput.max = available;
                if (parseInt(quantityInput.value) > available) {
                    quantityInput.value = available;
                }
            } else {
                quantityInput.max = 10;
            }

            // Show description if available
            @if (Model?.TicketCategories != null)
            {
                    @foreach (var ticket in Model.TicketCategories)
                    {
                            <text>
                            if (selectedOption.value === '@ticket.TicketCategory' && '@ticket.Description') {
                                descriptionText.textContent = '@ticket.Description';
                                descriptionDiv.style.display = 'block';
                            } else if (selectedOption.value === '@ticket.TicketCategory') {
                                descriptionDiv.style.display = 'none';
                            }
                            </text>
                    }
            }

            updateTotal();
        } else {
            descriptionDiv.style.display = 'none';
            document.querySelector('#totalDisplay').style.display = 'none';
        }
    }

    function updateTotal() {
        const priceField = document.querySelector('#ticketPrice');
        const quantityInput = document.querySelector('#ticketQuantity');
        const totalDisplay = document.querySelector('#totalDisplay');
        const totalAmount = document.querySelector('#totalAmount');

        if (priceField && quantityInput && priceField.value && quantityInput.value) {
            const price = parseFloat(priceField.value) || 0;
            const quantity = parseInt(quantityInput.value) || 0;
            const total = price * quantity;

            totalAmount.textContent = total.toFixed(2);
            totalDisplay.style.display = 'block';
        } else {
            totalDisplay.style.display = 'none';
        }
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        const quantityInput = document.querySelector('#ticketQuantity');
        if (quantityInput) {
            quantityInput.addEventListener('change', updateTotal);
            quantityInput.addEventListener('input', updateTotal);
        }
    });
</script>